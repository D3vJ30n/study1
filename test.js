const day = 2;
let weekend = "";

switch (day) {
  case 1:
    weekend = "월요일";
    break;
  case 2:
    weekend = "화요일";
    break;
  case 3:
    weekend = "수요일";
    break;
  case 4:
    weekend = "목요일";
    break;
  case 5:
    weekend = "금요일";
    break;
  case 6:
    weekend = "토요일";
    break;
  case 7:
    weekend = "일요일";
    break;
}

console.log(weekend);

/* while 반복문 */

let i = 0;
while (i < 3) {
  console.log(i);
  i++;
}

/* do while 반복문 */

i = 4;
do {
  console.log(i);
  i++;
} while (i < 3);

/* 반복문 제어 */

let text = "";

for (let i = 0; i < 10; i++) {
  if (i === 3) break;
  text = text + i;
}

console.log(text);

// continue
text = "";

for (let i = 0; i < 10; i++) {
  if (i === 3) continue;
  text = text + i;
}

console.log(text);

/* 구구단 반복문 */

for (let i = 2; i <= 9; i++) {
  for (let j = 1; j <= 9; j++) {
    console.log(`${i} * ${j} = ${i * j}`);
  }
}

/* 
비교 연산자들은 두 값을 비교할 때 사용하며, 그 결과는 참(true) 또는 거짓(false)이 됩니다. 주요 비교 연산자들을 설명해 드릴게요:

<= (작거나 같다)
왼쪽 값이 오른쪽 값보다 작거나 같은지 비교합니다.
예: 5 <= 7 (참), 7 <= 5 (거짓), 5 <= 5 (참)


= (크거나 같다)
왼쪽 값이 오른쪽 값보다 크거나 같은지 비교합니다.
예: 7 >= 5 (참), 5 >= 7 (거짓), 5 >= 5 (참)


< (작다)
왼쪽 값이 오른쪽 값보다 작은지 비교합니다.
예: 5 < 7 (참), 7 < 5 (거짓), 5 < 5 (거짓)


> (크다)
왼쪽 값이 오른쪽 값보다 큰지 비교합니다.
예: 7 > 5 (참), 5 > 7 (거짓), 5 > 5 (거짓)


== (같다)
두 값이 서로 같은지 비교합니다.
예: 5 == 5 (참), 5 == 7 (거짓)


!= (같지 않다)
두 값이 서로 다른지 비교합니다.
예: 5 != 7 (참), 5 != 5 (거짓)

이 부분은 "i가 9보다 작거나 같은 동안 반복한다"는 의미입니다.

i가 2일 때: 2 <= 9 (참, 반복 계속)
i가 3일 때: 3 <= 9 (참, 반복 계속)
...
i가 9일 때: 9 <= 9 (참, 반복 계속)
i가 10이 되면: 10 <= 9 (거짓, 반복 종료)

이렇게 비교 연산자를 사용하여 반복문의 조건을 설정하고, 원하는 범위 내에서만 코드가 실행되도록 제어할 수 있습니다.

문자열 템플릿이란?

백틱() 기호로 둘러싸인 문자열 안에 ${}` 를 사용해 변수나 표현식을 넣을 수 있는 방법입니다.

왜 이 방법을 사용했나?

가독성: 코드를 읽기 쉽게 만들어 줍니다.
편의성: 문자열과 변수를 쉽게 조합할 수 있습니다.

다음과 같이 출력
${i}: i의 값을 문자열에 삽입합니다.
${j}: j의 값을 문자열에 삽입합니다.
${i * j}: i와 j를 곱한 결과를 문자열에 삽입합니다. */
